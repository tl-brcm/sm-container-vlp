{{- if and .Values.global.registry.credentials.username ( not .Values.global.registry.existingSecrets ) }}
# Credentials for private registry
kind: Secret
apiVersion: v1
metadata:
  name: {{ .Release.Name }}-siteminder-registry-key
  namespace: {{ .Release.Namespace }} 
  labels:
    release: {{ .Release.Name }} 
    #app: my-sso-casso 
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: {{ template "imagePullSecret" . }}
{{- end }}
---
# Secrets for CA Single Sign-On
kind: Secret
apiVersion: v1
metadata:
  name: {{ .Release.Name }}-siteminder 
  namespace: {{ .Release.Namespace }} 
  labels:
    release: {{ .Release.Name }} 
    app: {{ template "fullname" . }} 
type: Opaque
data:
  masterKeySeed: {{ .Values.global.masterKeySeed }}
  
  {{- if .Values.global.superuserPassword }}
  superuserPassword: {{ .Values.global.superuserPassword }}
  {{- else }}
  superuserPassword: ""
  {{- end }}

  {{- if .Values.global.policyStore.userPassword }}
  policyStoreUserPassword: {{ .Values.global.policyStore.userPassword }}
  {{- else }}
  policyStoreUserPassword: ""
  {{- end }}

  {{- if .Values.global.stores.keyStore.userPassword }}
  keyStoreUserPassword: {{ .Values.global.stores.keyStore.userPassword }}
  {{- else }}
  keyStoreUserPassword: ""
  {{- end }}

  {{- if .Values.global.stores.keyStore.encryptionKey }}
  keyStoreEncryptionKey: {{ .Values.global.stores.keyStore.encryptionKey }}
  {{- else }}
  keyStoreEncryptionKey: ""
  {{- end }}

  {{- if .Values.global.encryptionKey }}  
  policyStoreEncryptionKey: {{ .Values.global.encryptionKey }}
  {{- else }}
  policyStoreEncryptionKey: ""
  {{- end }}

  {{- if .Values.global.policyServerParams.secrets.importPassphrase }}
  importPassphrase: {{ .Values.global.policyServerParams.secrets.importPassphrase }}
  {{- else }}
  importPassphrase: ""
  {{- end }}
 
  {{- if .Values.global.stores.auditStore.odbc.userPassword }}
  auditStoreUserPassword: {{ .Values.global.stores.auditStore.odbc.userPassword }}
  {{- else }}
  auditStoreUserPassword: ""
  {{- end }}

  {{- if .Values.global.stores.sessionStore.userPassword }}
  sessionStoreUserPassword: {{ .Values.global.stores.sessionStore.userPassword }}
  {{- else }}
  sessionStoreUserPassword: ""
  {{- end }}

  {{- if .Values.policyServer.rsaSecureId.nodeSecretEncryptionPassword }}
  NodeSecretEncryptionPassword: {{ .Values.policyServer.rsaSecureId.nodeSecretEncryptionPassword }}
  {{- else }}
  NodeSecretEncryptionPassword: ""
  {{- end }}

  {{- if .Values.global.policyServerParams.secrets.ldapSSLNSSDBPassword }}
  ldapSSLNSSDBPassword: {{ .Values.global.policyServerParams.secrets.ldapSSLNSSDBPassword }}
  {{- else }}
  ldapSSLNSSDBPassword: ""
  {{- end }}

  {{- if .Values.global.policyStore.odbc.ssl.trustPassword }}
  policyStoreODBCtrustStorePassword: {{ .Values.global.policyStore.odbc.ssl.trustPassword }}
  {{- else }}
  policyStoreODBCtrustStorePassword: ""
  {{- end }}

  {{- if .Values.global.stores.keyStore.odbc.ssl.trustPassword }}
  keyStoreODBCtrustStorePassword: {{ .Values.global.stores.keyStore.odbc.ssl.trustPassword }}
  {{- else }}
  keyStoreODBCtrustStorePassword: ""
  {{- end }}

  {{- if .Values.global.stores.sessionStore.odbc.ssl.trustPassword }}
  sessionStoreODBCtrustStorePassword: {{ .Values.global.stores.sessionStore.odbc.ssl.trustPassword }}
  {{- else }}
  sessionStoreODBCtrustStorePassword: ""
  {{- end }}

  {{- if .Values.global.stores.auditStore.odbc.ssl.trustPassword }}
  auditStoreODBCtrustStorePassword: {{ .Values.global.stores.auditStore.odbc.ssl.trustPassword }}
  {{- else }}
  auditStoreODBCtrustStorePassword: ""
  {{- end }}

  {{- if .Values.global.policyServerParams.healthProbe.keyStorePassword }}
  psHealthKeystorePassword: {{ .Values.global.policyServerParams.healthProbe.keyStorePassword }}
  {{- else }}
  psHealthKeystorePassword: ""
  {{- end }}

  {{- if .Values.admin.adminUI.externalAuth.odbc.userPassword }}
  adminUIOdbcUserStorePassword: {{ .Values.admin.adminUI.externalAuth.odbc.userPassword }}
  {{- else }}
  adminUIOdbcUserStorePassword: ""
  {{- end }}
  
  {{- if .Values.admin.adminUI.externalAuth.ldap.userPassword }}
  adminUILdapUserStorePassword: {{ .Values.admin.adminUI.externalAuth.ldap.userPassword }}
  {{- else }}
  adminUILdapUserStorePassword: ""
  {{- end }}

  {{- if .Values.admin.adminUI.customKeyStore.password }}
  adminUIHttpsKeyStorePassword: {{ .Values.admin.adminUI.customKeyStore.password }}
  {{- else }}
  adminUIHttpsKeyStorePassword: ""
  {{- end }}

  {{- if eq .Values.global.configuration.type "awsS3" }}
  {{- if .Values.global.configuration.aws.keyID }}
  awsAccessKeyId: {{ .Values.global.configuration.aws.keyID }}
  {{- else }}
  awsAccessKeyId: ""
  {{- end }}
  {{- if .Values.global.configuration.aws.accessKey }}
  awsSecretAccessKey: {{ .Values.global.configuration.aws.accessKey }}
  {{- else }}
  awsSecretAccessKey: ""
  {{- end }}
  {{- end }}

  {{- if eq .Values.global.runtimeConfiguration.type "awsS3" }}
  {{- if .Values.global.runtimeConfiguration.aws.keyID }}
  awsRuntimeAccessKeyId: {{ .Values.global.runtimeConfiguration.aws.keyID }}
  {{- else }}
  awsRuntimeAccessKeyId: ""
  {{- end }}
  {{- if .Values.global.runtimeConfiguration.aws.accessKey }}
  awsRuntimeSecretAccessKey: {{ .Values.global.runtimeConfiguration.aws.accessKey  }}
  {{- else }}
  awsRuntimeSecretAccessKey: ""
  {{- end }}
  {{- end }}

  {{- if eq .Values.global.configuration.type "git" }}
  {{- if .Values.global.configuration.git.accessToken }}
  githubAccessToken: {{ .Values.global.configuration.git.accessToken  }}
  {{- else }}
  githubAccessToken: ""
  {{- end }}
  {{- end }}

  {{- if eq .Values.global.runtimeConfiguration.type "git" }}
  {{- if .Values.global.runtimeConfiguration.git.accessToken }}
  githubRuntimeAccessToken: {{ .Values.global.runtimeConfiguration.git.accessToken  }}
  {{- else }}
  githubRuntimeAccessToken: ""
  {{- end }}
  {{- end }}

  {{- if eq .Values.global.troubleshootingData.storageType "awsS3" }}
  {{- if .Values.global.troubleshootingData.aws.keyID }}
  troubleshootDataAwsAccessKeyId: {{ .Values.global.troubleshootingData.aws.keyID }}
  {{- else }}
  troubleshootDataAwsAccessKeyId: ""
  {{- end }}
  {{- if .Values.global.troubleshootingData.aws.accessKey }}
  troubleshootDataAwsSecretAccessKey: {{ .Values.global.troubleshootingData.aws.accessKey }}
  {{- else }}
  troubleshootDataAwsSecretAccessKey: ""
  {{- end }}
  {{- end }}

  {{- if eq .Values.global.troubleshootingData.storageType "azureFileShares" }}
  {{- if .Values.global.troubleshootingData.azure.sasToken }}
  troubleshootDataAzureSASToken: {{ .Values.global.troubleshootingData.azure.sasToken }}
  {{- else }}
  troubleshootDataAzureSASToken: ""
  {{- end }}
  {{- end }}
