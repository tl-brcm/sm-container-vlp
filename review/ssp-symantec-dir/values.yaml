# Default values for ssp-symantec-dir.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
nameOverride: ""
fullnameOverride: ""
global:
  useImageDigest: false
  registry:
    imageRepositoryBase: securityservices.packages.broadcom.com/
    existingSecrets: []
    # fill in the paramters below to have the chart create the registry secret
    # this section is ignored if ssp.global.ssp.registry.existingSecrets is specified
    url: https://securityservices.packages.broadcom.com/
    credentials:
      username: username
      password: password
  securityContext:
    runAsUser: 65534
    runAsGroup: 65534
    fsGroup: 1337
image:
  symantec_dir:
    name: "cadir"
    tag: 2.1.5.1047
    imageDigest: "sha256:77525d39e49559a477ecad4432e65aaefbd85f1c18ff6f8bf41053761979da2b"
  pullPolicy: Always
dsaConfig:
  baseDN: "o=democorp,c=us"
  prefix: "<c us><o democorp>"
  sizeInMB: 500
  adminPassword: password
  existingConfigMapName: ""
  existingSecretName: ""
  memberofUserContainers: "<c us><o democorp>"
  memberofGroupContainers: "<c us><o democorp><ou Groups>"
  ## to add additional dsa configuration files (to be mounted under dxserver/config/customconfig), specify the name of a configmap containing the files.
  ## to create such a configmap object from an ldif file, use:
  ## kubectl create configmap <configmap name, e.g. customcfgfiles> -n <namespace e.g. idstore> --from-file=<path to file/folder>
  additionalFilesConfigMapName: ""
  additionalSettings: "" #|
  #  source "../customconfig/netegrity.dxc";
  #  source "../customconfig/etrust.dxc";
  tls:
    enabled: true
    existingSecretName: ""
ldifImport:
  enabled: true
  ## to import your own ldif file specify the name of a configmap containing an ldif file to be imported to the directory upon deployment.
  ## to create such a configmap object from an ldif file, use:
  ## kubectl create configmap <configmap name, e.g. myusers> -n <namespace e.g. idstore> --from-file=<path to ldif file, e.g. users.ldif>
  existingConfigMapName: ""
service:
  annotations: {}
  type: NodePort
  servicePort: "389"
  nodePort: ""
  #nodePort: "30389"
persistence:
  enabled: true
  accessMode: ReadWriteOnce
  size: "4Gi"
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  storageClass: ""
  keepAfterUninstall: false
  existingPVCName: ""
dsaLogs:
  cert:
    enabled: false
  connect:
    enabled: false
  diag:
    #does not have a separate log collector container since this output is also sent to the trace log.
    enabled: false
  query:
    enabled: false
    #possible values: "none", "all", or a comma separated list of: source, ldap-controls, ldap-error, update-timer, show-eis
    advanced: none
  stats:
    enabled: false
    extendedTracing: false
  summary:
    enabled: false
  time:
    enabled: false
    searchThreshold: none
    updateThreshold: none
  trace:
    enabled: true
    # Set trace to error for production systems, dsa level is appropriate for debugging only
    # possible values: alert, cert,connect,diag,dsa,error,ldap,limit,query,stack,stats,summary,time,update,warn,x500 and none
    level: error
  update:
    enabled: false
    showValues: false
  warn:
    enabled: false
replicaCount: "1" #scaling not supported (replicas should always be 1)
hostname: 0c1d3ead5118
resources: {}
# limits:
#   cpu: 500m
#   memory: 4Gi
# requests:
#   cpu: 100m
#   memory: 1Gi

routerDSA:
  enabled: false
  dxlinkOU: ""
  additionalSettings: "" #|
  # source "../customconfig/ad-knowledge.dxc";

  logs:
    topRouter:
      trace:
        enabled: true
        # Set trace to error for production systems, dsa level is appropriate for debugging only
        # possible values: alert, cert,connect,diag,dsa,error,ldap,limit,query,stack,stats,summary,time,update,warn,x500 and none
        level: error
      stats:
        enabled: false
        extendedTracing: false
      warn:
        enabled: true
    dxlink:
      trace:
        enabled: true
        # Set trace to error for production systems, dsa level is appropriate for debugging only
        # possible values: alert, cert,connect,diag,dsa,error,ldap,limit,query,stack,stats,summary,time,update,warn,x500 and none
        level: error
      stats:
        enabled: false
        extendedTracing: false
      warn:
        enabled: true
nodeSelector: {}
tolerations: []
affinity: {}
mode: ""
