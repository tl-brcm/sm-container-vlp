{{- if .Values.dsaConfig.tls.enabled }}
{{- if not .Values.dsaConfig.tls.existingSecretName }}
{{- $serviceName := include "fullname" . }}
{{- $cn := $serviceName }}
{{- $alt1 := printf "%s.%s.svc.cluster.local" $serviceName .Release.Namespace }}
{{- $alt2 := printf "%s.%s.svc" $serviceName .Release.Namespace }}
{{- $caSubjectCN := printf "%s-ca" (include "fullname" .) }}


{{- if .Release.IsInstall }}
#create new secret
apiVersion: v1
kind: Secret
metadata:
  name: {{ template  "tls.secretName.def" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    release: {{ .Release.Name }}
type: Opaque
data:
  {{- $ca:= genCA $caSubjectCN 3650 }}
  {{- $cert := genSignedCert $cn nil (list $alt1 $alt2) 3650 $ca }}
  ca.crt: {{ b64enc $ca.Cert |quote}}
  tls.key: {{ b64enc $cert.Key |quote}}
  tls.crt: {{ b64enc $cert.Cert |quote}}
#done creating new secret on install
{{- else }} #if upgrade
#upgrade flow
#create secret using existing values (if available)
apiVersion: v1
kind: Secret
metadata:
  name: {{ template  "tls.secretName.def" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    release: {{ .Release.Name }}
type: Opaque
data:
{{- $secretname := ( include "tls.secretName.def" . ) }}
{{- $secret := (lookup "v1" "Secret" .Release.Namespace $secretname ) -}}

{{- if $secret }} #if secret already exists on upgrade, validate and reuse existing values.
#validate tls.key
{{- $filedata := (index $secret "data" "tls.key" ) -}}
{{- if not $filedata }}
{{- $errmsg := printf "***** Existing TLS secret (%s) does not contain tls.key file" $secretname -}}
{{ required $errmsg  .Values.randomValueThatDoesNotExist }}
{{- else }}
  tls.key: {{ $filedata |quote }}
{{- end }}
#validate tls.crt
{{- $filedata := (index $secret "data" "tls.crt" ) -}}
{{- if not $filedata }}
{{- $errmsg := printf "***** Existing TLS secret (%s) does not contain tls.crt file" $secretname -}}
{{ required $errmsg  .Values.randomValueThatDoesNotExist }}
{{- else }}
  tls.crt: {{ $filedata |quote}}
{{- end }}
#validate ca.crt
{{- $filedata := (index $secret "data" "ca.crt" ) -}}
{{- if not $filedata }}
{{- $errmsg := printf "***** Existing TLS secret (%s) does not contain ca.crt file" $secretname -}}
{{ required $errmsg  .Values.randomValueThatDoesNotExist }}
{{- else }}
  ca.crt: {{ $filedata |quote}}
{{- end }}

{{- else }} #tls secret was not found during upgrade, generate new values
  {{- $ca:= genCA $caSubjectCN 3650 }}
  {{- $cert := genSignedCert $cn nil (list $alt1 $alt2) 3650 $ca }}
  ca.crt: {{ b64enc $ca.Cert |quote}}
  tls.key: {{ b64enc $cert.Key |quote}}
  tls.crt: {{ b64enc $cert.Cert |quote}}
#done creating new secret on upgrade, when the tls secret is not found
{{- end }}
{{- end }} #end of upgrade

{{- else }} #TLS existingSecretName provided - just validate the secret has all of the required files
{{- $secretname := .Values.dsaConfig.tls.existingSecretName }}
{{- $secret := (lookup "v1" "Secret" .Release.Namespace $secretname ) -}}
{{- if $secret }}
  #validate tls.key
  {{- $fileexists := (index $secret "data" "tls.key" ) -}}
  {{- if not $fileexists }}
  {{- $errmsg := printf "***** Existing TLS secret (%s) does not contain tls.key file" $secretname -}}
  {{ required $errmsg  .Values.randomValueThatDoesNotExist }}
  {{- end }}
  #validate tls.crt
  {{- $fileexists := (index $secret "data" "tls.crt" ) -}}
  {{- if not $fileexists }}
  {{- $errmsg := printf "***** Existing TLS secret (%s) does not contain tls.crt file" $secretname -}}
  {{ required $errmsg  .Values.randomValueThatDoesNotExist }}
  {{- end }}
  #validate ca.crt
  {{- $fileexists := (index $secret "data" "ca.crt" ) -}}
  {{- if not $fileexists }}
  {{- $errmsg := printf "***** Existing TLS secret (%s) does not contain ca.crt file" $secretname -}}
  {{ required $errmsg  .Values.randomValueThatDoesNotExist }}
  {{- end }}
{{- else }} # provided secret not found
  {{- $errmsg := printf "***** Existing TLS secret provided (%s) but does not exist" $secretname -}}
  {{ required $errmsg  .Values.randomValueThatDoesNotExist }}
{{- end }} #end of not provided existing secret not found
{{- end }} #end of tls.existingSecret provided
{{- end }} #end tls.enabled
