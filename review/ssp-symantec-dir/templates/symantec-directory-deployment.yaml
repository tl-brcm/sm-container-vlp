apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ template "name" . }}
    app.kubernetes.io/version: {{ .Chart.AppVersion | replace "+" "_" | quote }}
    app.kubernetes.io/component: id-store
    app.kubernetes.io/part-of: {{ template "name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
spec:
  replicas: {{ .Values.replicaCount }}

  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "name" . }}
      app.kubernetes.io/component: id-store
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/managed-by: {{ .Release.Service }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "name" . }}
        imageTag: {{ .Values.image.symantec_dir.tag | quote }}
        app.kubernetes.io/version: {{ .Chart.AppVersion | replace "+" "_" | quote }}
        app.kubernetes.io/component: id-store
        app.kubernetes.io/part-of: {{ template "name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    spec:
      {{- if .Values.global.registry.existingSecrets }}
      imagePullSecrets:
      {{- toYaml .Values.global.registry.existingSecrets | nindent 6 }}
      {{- else if .Values.global.registry.credentials.username }}
      imagePullSecrets:
      - name: {{ include "fullname" . }}-registrypullsecret
      {{- end }}
      {{- if .Values.existingServiceAccount }}
      serviceAccountName: {{ .Values.existingServiceAccount }}
      {{- end }}			 	
      securityContext:
        runAsUser: {{ .Values.global.securityContext.runAsUser }}
        runAsGroup: {{ .Values.global.securityContext.runAsGroup }}
        fsGroup: {{ .Values.global.securityContext.fsGroup }}
      hostname: {{ .Values.hostname }}
      initContainers:
      - name: dsa-init
        image: {{ template "image" dict "root" . "component" "symantec_dir" }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
	  {{- if ne .Values.mode "perf"}}
          readOnlyRootFilesystem: true
	  {{- end }}
        env:
        - name: ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.dsaConfig.existingSecretName | default ( printf "%s-admin" (include "fullname" . )) }}
              key: adminPassword
        command:
        - sh
        - "-c"
        - |
          echo Copying config files...
           # Clear the sourcing of the knowledge files in the emptyDir knowledge share
          if [ -f /opt/CA/Directory/dxserver/config/servers/* ]; then
              rm /opt/CA/Directory/dxserver/config/servers/* 2>/dev/null
          fi
          if [ -f /opt/CA/Directory/dxserver/config/tls/* ]; then
              rm /opt/CA/Directory/dxserver/config/tls/* 2>/dev/null
          fi
          cp '/opt/CA/Directory/dxserver/config-src/{{ template "fullname" . }}'*'.dxi' /opt/CA/Directory/dxserver/config/servers/
          cp '/opt/CA/Directory/dxserver/config-src/{{ template "fullname" . }}-knowledge.dxc' '/opt/CA/Directory/dxserver/config/knowledge/{{ template "fullname" . }}.dxc'
          cp '/opt/CA/Directory/dxserver/config-src/{{ template "fullname" . }}'*'-logging.dxc' /opt/CA/Directory/dxserver/config/logging/
          cp '/opt/CA/Directory/dxserver/config-src/{{ template "fullname" . }}'*'-ssld.dxc' /opt/CA/Directory/dxserver/config/tls/
          {{ if .Values.routerDSA.enabled }}
            cp '/opt/CA/Directory/dxserver/config-src/{{ template "fullname" . }}-top-router-knowledge.dxc' '/opt/CA/Directory/dxserver/config/knowledge/{{ template "fullname" . }}-top-router.dxc'
            cp '/opt/CA/Directory/dxserver/config-src/{{ template "fullname" . }}-dxlink-router-knowledge.dxc' '/opt/CA/Directory/dxserver/config/knowledge/{{ template "fullname" . }}-dxlink-router.dxc'
          {{- end }}
          {{ if .Values.dsaConfig.tls.enabled }}
          TLS_SECRET_MOUNT='/opt/CA/Directory/dxserver/config/tls-src'
          TLS_CERT_DATA_MOUNT='/opt/CA/Directory/dxserver/config/tls'
          echo Copy TLS certificates to ${TLS_CERT_DATA_MOUNT}/tls.key
          if [ -f "${TLS_SECRET_MOUNT}/tls.crt" -a -f "${TLS_SECRET_MOUNT}/tls.key" ]; then
            awk -v TLS_CERT_DATA_MOUNT="${TLS_CERT_DATA_MOUNT}" '
              /BEGIN CERTIFICATE/{C++}
              1 == C {print >> TLS_CERT_DATA_MOUNT "/{{ template "fullname" . }}.pem"}
              2 <= C {print >> TLS_CERT_DATA_MOUNT "/trusted.pem"}
            ' "${TLS_SECRET_MOUNT}/tls.crt"
            if [ -f "${TLS_SECRET_MOUNT}/ca.crt" ]; then
              cat "${TLS_SECRET_MOUNT}/ca.crt" >> "${TLS_CERT_DATA_MOUNT}/trusted.pem"
            fi
            cat "${TLS_SECRET_MOUNT}/tls.key" >> "${TLS_CERT_DATA_MOUNT}/{{ template "fullname" . }}.pem"
          fi
          {{- end }}

          if [ -f '/opt/CA/Directory/dxserver/data/{{ template "fullname" . }}.db' ] ; then
            echo dsa already initialized, using existing db.
          else
            echo initializing dsa db file...
            (set -x; $DXHOME/bin/dxnewdb '{{ template "fullname" . }}') || exit $?

            (set -x; $DXHOME/bin/dxserver stop '{{ template "fullname" . }}')

            #envsubst < /opt/CA/Directory/dxserver/config-src/{{ template "fullname" . }}-base.ldif >/tmp/base.ldif  #envsubst not in image
            sed -e 's/${ADMIN_PASSWORD}/'"${ADMIN_PASSWORD}/g" '/opt/CA/Directory/dxserver/config-src/{{ template "fullname" . }}-base.ldif' > /tmp/base.ldif
            echo '####' >>/tmp/base.ldif
            count=`ls -1 /opt/CA/Directory/dxserver/ldif/*.ldif 2>/dev/null | wc -l`
            if [ $count != 0 ]; then
               cat /opt/CA/Directory/dxserver/ldif/*.ldif >> /tmp/base.ldif
            fi

            (set -x; $DXHOME/bin/dxloaddb -s '{{ template "fullname" . }}' /tmp/base.ldif )
            ret=$(($?))
            if [ 0 -ne $ret ]; then
              echo "Failed to load ldif data into db ($ret). Deleting db."
              rm '/opt/CA/Directory/dxserver/data/{{ template "fullname" . }}.db'
              exit $ret
            fi 1>&2
          fi

          #tail -f /dev/null #used for debug

        volumeMounts:
        - name: dsa-config-src
          mountPath: /opt/CA/Directory/dxserver/config-src
        - name: dsa-config-servers
          mountPath: /opt/CA/Directory/dxserver/config/servers
        - name: dsa-config-knowledge
          mountPath: /opt/CA/Directory/dxserver/config/knowledge
        - name: dsa-config-logging
          mountPath: /opt/CA/Directory/dxserver/config/logging
        - name: dsa-config-customconfigfiles
          mountPath: /opt/CA/Directory/dxserver/config/customconfig
        - name: dsa-ldif
          mountPath: /opt/CA/Directory/dxserver/ldif
        - name: dsa-data
          mountPath: /opt/CA/Directory/dxserver/data
        - name: dsa-pid
          mountPath: /opt/CA/Directory/dxserver/pid
        - name: dsa-tmp
          mountPath: /tmp
        - mountPath: /opt/CA/Directory/dxserver/config/tls-src
          name: dsa-tls-secret
          readOnly: true
        - mountPath: /opt/CA/Directory/dxserver/config/tls
          name: dsa-tls-cert-data
      containers:
      - name: symantec-directory
        image: {{ template "image" dict "root" . "component" "symantec_dir" }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
	  {{- if ne .Values.mode "perf"}}
          readOnlyRootFilesystem: true
	  {{- end }}
        resources:
          {{ toYaml .Values.resources | nindent 12 }}
        command:
        - /opt/CA/Directory/dxserver/bin/dxserver
        - "-d"
        - "start"
        - "{{ template "fullname" . }}"
        ports:
        - containerPort: 10389
        volumeMounts:
        - name: dsa-config-src
          mountPath: /opt/CA/Directory/dxserver/config-src
        - name: dsa-config-servers
          mountPath: /opt/CA/Directory/dxserver/config/servers
        - name: dsa-config-knowledge
          mountPath: /opt/CA/Directory/dxserver/config/knowledge
        - name: dsa-config-logging
          mountPath: /opt/CA/Directory/dxserver/config/logging
        - name: dsa-config-customconfigfiles
          mountPath: /opt/CA/Directory/dxserver/config/customconfig
          {{- if ne .Values.mode "perf"}}            
        - name: dsa-data
          mountPath: /opt/CA/Directory/dxserver/data
          {{- end }}  
        - name: dsa-logs
          mountPath: /opt/CA/Directory/dxserver/logs
        - name: dsa-pid
          mountPath: /opt/CA/Directory/dxserver/pid
        - mountPath: /opt/CA/Directory/dxserver/config/tls
          name: dsa-tls-cert-data
      - name: symantec-directory-log-mgmt
        image: {{ template "image" dict "root" . "component" "symantec_dir" }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
 	  {{- if ne .Values.mode "perf"}}
          readOnlyRootFilesystem: true
	  {{- end }}
        resources:
          {{ toYaml .Values.resources | nindent 12 }}
        command:
        - "/bin/sh"
        - "-c"
        - |
          rm_all_old_logs() {
            cd '/opt/CA/Directory/dxserver/logs'
            while :; do
              find * -prune -mtime +2 -regex '.*_[^_]*_\d\d\d\d\d\d\d\d\.log' -exec echo delete {} + -delete
              sleep 60
            done
          }
          ln_latest_log() {
            local LOGNAME="$1"
            cd /opt/CA/Directory/dxserver/logs
            LOGNAME_WITH_DATE="${LOGNAME}_$(date +"%Y%m%d").log"
            ln -s "${LOGNAME_WITH_DATE}" "${LOGNAME}.log"
            while :; do
              if [ -f "${LOGNAME_WITH_DATE}" -a "$(readlink -f "${LOGNAME}.log")" != "/opt/CA/Directory/dxserver/logs/${LOGNAME_WITH_DATE}" ]; then
                sleep 60 # wait for fflush()
                ln -svf "${LOGNAME_WITH_DATE}" "${LOGNAME}.log"
              fi
              sleep 60
              LOGNAME_WITH_DATE="${LOGNAME}_$(date +"%Y%m%d").log"
            done
          }
          for LOG in cert connect diag query stats summary time update warn; do
            ln_latest_log "{{ template "fullname" . }}_${LOG}" &
            {{ if .Values.routerDSA.enabled }}
            ln_latest_log "{{ template "fullname" . }}-top-router_${LOG}" &
            ln_latest_log "{{ template "fullname" . }}-dxlink-router_${LOG}" &
            {{- end }}
          done

          rm_all_old_logs &

          wait
        volumeMounts:
        - name: dsa-logs
          mountPath: /opt/CA/Directory/dxserver/logs

      - name: symantec-directory-log-alarm
        image: {{ template "image" dict "root" . "component" "symantec_dir" }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
	  {{- if ne .Values.mode "perf"}}	
          readOnlyRootFilesystem: true
	  {{- end }}
        resources:
          {{ toYaml .Values.resources | nindent 12 }}
        command:
        - "/bin/sh"
        - "-c"
        - "tail -n+1 -F /opt/CA/Directory/dxserver/logs/{{ template "fullname" . }}_alarm.log"
        volumeMounts:
        - name: dsa-logs
          mountPath: /opt/CA/Directory/dxserver/logs

      {{- if .Values.dsaLogs.cert.enabled }}
      - name: symantec-directory-log-cert
        image: {{ template "image" dict "root" . "component" "symantec_dir" }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
	  {{- if ne .Values.mode "perf"}}
          readOnlyRootFilesystem: true
	  {{- end }}
        resources:
          {{ toYaml .Values.resources | nindent 12 }}
        command:
        - "/bin/sh"
        - "-c"
        - "tail -n+1 -F /opt/CA/Directory/dxserver/logs/{{ template "fullname" . }}_cert.log"
        volumeMounts:
        - name: dsa-logs
          mountPath: /opt/CA/Directory/dxserver/logs
      {{- end }}

      {{- if .Values.dsaLogs.connect.enabled }}
      - name: symantec-directory-log-connect
        image: {{ template "image" dict "root" . "component" "symantec_dir" }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
	  {{- if ne .Values.mode "perf"}}
          readOnlyRootFilesystem: true
	  {{- end }}		
        resources:
          {{ toYaml .Values.resources | nindent 12 }}
        command:
        - "/bin/sh"
        - "-c"
        - "tail -n+1 -F /opt/CA/Directory/dxserver/logs/{{ template "fullname" . }}_connect.log"
        volumeMounts:
        - name: dsa-logs
          mountPath: /opt/CA/Directory/dxserver/logs
      {{- end }}

      {{- if .Values.dsaLogs.query.enabled }}
      - name: symantec-directory-log-query
        image: {{ template "image" dict "root" . "component" "symantec_dir" }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
	  {{- if ne .Values.mode "perf"}}
          readOnlyRootFilesystem: true
	  {{- end }}
        resources:
          {{ toYaml .Values.resources | nindent 12 }}
        command:
        - "/bin/sh"
        - "-c"
        - "tail -n+1 -F /opt/CA/Directory/dxserver/logs/{{ template "fullname" . }}_query.log"
        volumeMounts:
        - name: dsa-logs
          mountPath: /opt/CA/Directory/dxserver/logs
      {{- end }}

      {{- if .Values.dsaLogs.stats.enabled }}
      - name: symantec-directory-log-stats
        image: {{ template "image" dict "root" . "component" "symantec_dir" }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
	  {{- if ne .Values.mode "perf"}}
          readOnlyRootFilesystem: true
	  {{- end }}
        resources:
          {{ toYaml .Values.resources | nindent 12 }}
        command:
        - "/bin/sh"
        - "-c"
        - "tail -n+1 -F /opt/CA/Directory/dxserver/logs/{{ template "fullname" . }}_stats.log"
        volumeMounts:
        - name: dsa-logs
          mountPath: /opt/CA/Directory/dxserver/logs
      {{- end }}

      {{- if .Values.dsaLogs.summary.enabled }}
      - name: symantec-directory-log-summary
        image: {{ template "image" dict "root" . "component" "symantec_dir" }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
	  {{- if ne .Values.mode "perf"}}
          readOnlyRootFilesystem: true
	  {{- end }}
        resources:
          {{ toYaml .Values.resources | nindent 12 }}
        command:
        - "/bin/sh"
        - "-c"
        - "tail -n+1 -F /opt/CA/Directory/dxserver/logs/{{ template "fullname" . }}_summary.log"
        volumeMounts:
        - name: dsa-logs
          mountPath: /opt/CA/Directory/dxserver/logs
      {{- end }}

      {{- if .Values.dsaLogs.time.enabled }}
      - name: symantec-directory-log-time
        image: {{ template "image" dict "root" . "component" "symantec_dir" }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
	  {{- if ne .Values.mode "perf"}}
          readOnlyRootFilesystem: true
	  {{- end }}
        resources:
          {{ toYaml .Values.resources | nindent 12 }}
        command:
        - "/bin/sh"
        - "-c"
        - "tail -n+1 -F /opt/CA/Directory/dxserver/logs/{{ template "fullname" . }}_time.log"
        volumeMounts:
        - name: dsa-logs
          mountPath: /opt/CA/Directory/dxserver/logs
      {{- end }}

      {{- if .Values.dsaLogs.trace.enabled }}
      - name: symantec-directory-log-trace
        image: {{ template "image" dict "root" . "component" "symantec_dir" }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
	  {{- if ne .Values.mode "perf"}}
          readOnlyRootFilesystem: true
	  {{- end }}
        resources:
          {{ toYaml .Values.resources | nindent 12 }}
        command:
        - "/bin/sh"
        - "-c"
        - "tail -n+1 -F /opt/CA/Directory/dxserver/logs/{{ template "fullname" . }}_trace.log"
        volumeMounts:
        - name: dsa-logs
          mountPath: /opt/CA/Directory/dxserver/logs
      {{- end }}

      {{- if .Values.dsaLogs.update.enabled }}
      - name: symantec-directory-log-update
        image: {{ template "image" dict "root" . "component" "symantec_dir" }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
	  {{- if ne .Values.mode "perf"}}
          readOnlyRootFilesystem: true
	  {{- end }}
        resources:
          {{ toYaml .Values.resources | nindent 12 }}
        command:
        - "/bin/sh"
        - "-c"
        - "tail -n+1 -F /opt/CA/Directory/dxserver/logs/{{ template "fullname" . }}_update.log"
        volumeMounts:
        - name: dsa-logs
          mountPath: /opt/CA/Directory/dxserver/logs
      {{- end }}

      {{- if .Values.dsaLogs.warn.enabled }}
      - name: symantec-directory-log-warn
        image: {{ template "image" dict "root" . "component" "symantec_dir" }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
	  {{- if ne .Values.mode "perf"}}
          readOnlyRootFilesystem: true
	  {{- end }}
        resources:
          {{ toYaml .Values.resources | nindent 12 }}
        command:
        - "/bin/sh"
        - "-c"
        - "tail -n+1 -F /opt/CA/Directory/dxserver/logs/{{ template "fullname" . }}_warn.log"
        volumeMounts:
        - name: dsa-logs
          mountPath: /opt/CA/Directory/dxserver/logs
      {{- end }}

      {{ if .Values.routerDSA.enabled }}
      - name: symantec-directory-top-router
        image: {{ template "image" dict "root" . "component" "symantec_dir" }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
	  {{- if ne .Values.mode "perf"}}
          readOnlyRootFilesystem: true
	  {{- end }}		
        resources:
          {{ toYaml .Values.resources | nindent 12 }}
        command:
        - /opt/CA/Directory/dxserver/bin/dxserver
        - "-d"
        - "start"
        - "{{ template "fullname" . }}-top-router"
        ports:
        - containerPort: 11389
        volumeMounts:
        - name: dsa-config-src
          mountPath: /opt/CA/Directory/dxserver/config-src
        - name: dsa-config-servers
          mountPath: /opt/CA/Directory/dxserver/config/servers
        - name: dsa-config-knowledge
          mountPath: /opt/CA/Directory/dxserver/config/knowledge
        - name: dsa-config-logging
          mountPath: /opt/CA/Directory/dxserver/config/logging
        - name: dsa-logs
          mountPath: /opt/CA/Directory/dxserver/logs
        - name: dsa-config-customconfigfiles
          mountPath: /opt/CA/Directory/dxserver/config/customconfig
        - name: dsa-pid
          mountPath: /opt/CA/Directory/dxserver/pid
        - mountPath: /opt/CA/Directory/dxserver/config/tls
          name: dsa-tls-cert-data
      - name: symantec-directory-dxlink-router
        image: {{ template "image" dict "root" . "component" "symantec_dir" }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
	  {{- if ne .Values.mode "perf"}}
          readOnlyRootFilesystem: true
	  {{- end }}
        resources:
          {{ toYaml .Values.resources | nindent 12 }}
        command:
        - /opt/CA/Directory/dxserver/bin/dxserver
        - "-d"
        - "start"
        - "{{ template "fullname" . }}-dxlink-router"
        ports:
        - containerPort: 12389
        volumeMounts:
        - name: dsa-config-src
          mountPath: /opt/CA/Directory/dxserver/config-src
        - name: dsa-config-servers
          mountPath: /opt/CA/Directory/dxserver/config/servers
        - name: dsa-config-knowledge
          mountPath: /opt/CA/Directory/dxserver/config/knowledge
        - name: dsa-config-logging
          mountPath: /opt/CA/Directory/dxserver/config/logging
        - name: dsa-logs
          mountPath: /opt/CA/Directory/dxserver/logs
        - name: dsa-config-customconfigfiles
          mountPath: /opt/CA/Directory/dxserver/config/customconfig
        - name: dsa-pid
          mountPath: /opt/CA/Directory/dxserver/pid
        - mountPath: /opt/CA/Directory/dxserver/config/tls
          name: dsa-tls-cert-data
      {{- end }}

      {{- if and .Values.routerDSA.enabled (.Values.routerDSA.logs.topRouter.trace.enabled) }}
      - name: symantec-directory-log-top-router-trace
        image: {{ template "image" dict "root" . "component" "symantec_dir" }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
	  {{- if ne .Values.mode "perf"}}
          readOnlyRootFilesystem: true
	  {{- end }}
        resources:
          {{ toYaml .Values.resources | nindent 12 }}
        command:
        - "/bin/sh"
        - "-c"
        - "tail -n+1 -F /opt/CA/Directory/dxserver/logs/{{ template "fullname" . }}-top-router_trace.log"
        volumeMounts:
        - name: dsa-logs
          mountPath: /opt/CA/Directory/dxserver/logs
      {{- end }}

      {{- if and .Values.routerDSA.enabled (.Values.routerDSA.logs.topRouter.warn.enabled) }}
      - name: symantec-directory-log-top-router-warn
        image: {{ template "image" dict "root" . "component" "symantec_dir" }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
	  {{- if ne .Values.mode "perf"}}
          readOnlyRootFilesystem: true
	  {{- end }}
        resources:
          {{ toYaml .Values.resources | nindent 12 }}
        command:
        - "/bin/sh"
        - "-c"
        - "tail -n+1 -F /opt/CA/Directory/dxserver/logs/{{ template "fullname" . }}-top-router_warn.log"
        volumeMounts:
        - name: dsa-logs
          mountPath: /opt/CA/Directory/dxserver/logs
      {{- end }}

      {{- if and .Values.routerDSA.enabled (.Values.routerDSA.logs.topRouter.stats.enabled) }}
      - name: symantec-directory-log-top-router-stats
        image: {{ template "image" dict "root" . "component" "symantec_dir" }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
	  {{- if ne .Values.mode "perf"}}
	  readOnlyRootFilesystem: true
	  {{- end }}
        resources:
          {{ toYaml .Values.resources | nindent 12 }}
        command:
        - "/bin/sh"
        - "-c"
        - "tail -n+1 -F /opt/CA/Directory/dxserver/logs/{{ template "fullname" . }}-top-router_stats.log"
        volumeMounts:
        - name: dsa-logs
          mountPath: /opt/CA/Directory/dxserver/logs
      {{- end }}

      {{- if and .Values.routerDSA.enabled (.Values.routerDSA.logs.dxlink.trace.enabled) }}
      - name: symantec-directory-log-dxlink-trace
        image: {{ template "image" dict "root" . "component" "symantec_dir" }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
	  {{- if ne .Values.mode "perf"}}
          readOnlyRootFilesystem: true
	  {{- end }}
        resources:
          {{ toYaml .Values.resources | nindent 12 }}
        command:
        - "/bin/sh"
        - "-c"
        - "tail -n+1 -F /opt/CA/Directory/dxserver/logs/{{ template "fullname" . }}-dxlink-router_trace.log"
        volumeMounts:
        - name: dsa-logs
          mountPath: /opt/CA/Directory/dxserver/logs
      {{- end }}

      {{- if and .Values.routerDSA.enabled (.Values.routerDSA.logs.dxlink.warn.enabled) }}
      - name: symantec-directory-log-dxlink-warn
        image: {{ template "image" dict "root" . "component" "symantec_dir" }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
	  {{- if ne .Values.mode "perf"}}
          readOnlyRootFilesystem: true
	  {{- end }}	
        resources:
          {{ toYaml .Values.resources | nindent 12 }}
        command:
        - "/bin/sh"
        - "-c"
        - "tail -n+1 -F /opt/CA/Directory/dxserver/logs/{{ template "fullname" . }}-dxlink-router_warn.log"
        volumeMounts:
        - name: dsa-logs
          mountPath: /opt/CA/Directory/dxserver/logs
      {{- end }}

      {{- if and .Values.routerDSA.enabled (.Values.routerDSA.logs.dxlink.stats.enabled) }}
      - name: symantec-directory-log-dxlink-stats
        image: {{ template "image" dict "root" . "component" "symantec_dir" }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
	  {{- if ne .Values.mode "perf"}}
          readOnlyRootFilesystem: true
	  {{- end }}		
        resources:
          {{ toYaml .Values.resources | nindent 12 }}
        command:
        - "/bin/sh"
        - "-c"
        - "tail -n+1 -F /opt/CA/Directory/dxserver/logs/{{ template "fullname" . }}-dxlink-router_stats.log"
        volumeMounts:
        - name: dsa-logs
          mountPath: /opt/CA/Directory/dxserver/logs
      {{- end }}

      volumes:
        - name: dsa-ldif
          {{- if .Values.ldifImport.enabled }}
          configMap:
            name: {{ .Values.ldifImport.existingConfigMapName | default ( printf "%s-ldif" (include "fullname" . )) }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: dsa-config-servers
          emptyDir: {}
        - name: dsa-config-knowledge
          emptyDir: {}
        - name: dsa-config-logging
          emptyDir: {}
        - name: dsa-config-src
          configMap:
            name: {{ .Values.dsaConfig.existingConfigMapName | default ( printf "%s-config" (include "fullname" . )) }}
        - name: dsa-config-customconfigfiles
          {{- if .Values.dsaConfig.additionalFilesConfigMapName }}
          configMap:
            name: {{ .Values.dsaConfig.additionalFilesConfigMapName }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: dsa-data
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingPVCName | default ( printf "%s-pvc" (include "fullname" . )) }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: dsa-logs
          emptyDir: {}
        - name: dsa-pid
          emptyDir: {}
        - name: dsa-tmp
          emptyDir: {}
        - name: dsa-tls-cert-data
          emptyDir: {}
        - name: dsa-tls-secret
          secret:
            secretName: {{ template  "tls.secretName" . }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
