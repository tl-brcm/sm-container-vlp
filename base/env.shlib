#!/bin/bash
VERSHLIB=1.33.shlib
	# This may not be needed, it is a derivation of the K8SVER from ../env.shlib
	# or it could be used to overwrite the K8SVER assumption
#
#-------------------------------------------------------------------
## Support Script Functions
#

#
## b64enc
#
b64enc () {
    echo -n "$1" | base64
    }

#
## nsexist
#
nsexist() {
    local _ns=$1
    kubectl get ns -o json |
        jq --arg s "$_ns" -r '[.items[].metadata.name]|.[]|select(. == "$_ns")'
    }

#
## createns
#
createns() {
    local _ns=$1
    if [ -z "$(nsexist "$_ns")" ] ; then
        kubectl create ns "$_ns"
    else
        >&2 echo $_ns exists
    fi
    }

#
## repoexist
#
repoexist() {
    local _repo=$1

    helm repo list -o json | jq --arg s "$_repo" '.[] | select(.name == "$_repo")'
    }

#
## relexist
#
relexist() {
    local _ns=$1
    local _rel=$2

    helm list -n "$_ns" -o json | jq --arg s "$_rel" '.[] | select(.name == "$_rel")'
    }

#
## chartexist
#
chartexist() {
    local _ns=$1
    local _chart=$2

    helm list -n "$_ns" -o json | jq --arg s "$_chart" '.[] | select(.name == "$_chart")'
    }

#
## secretexist
#
secretexist() {
    local _ns=$1
    local _secret=$2

    kubectl get secret -n "$_ns" -o json |
        jq --arg s "$_secret" -r '[.items[].metadata.name]| .[]|select(. == "$_secret")'
    }

#
##
#
createtls() {
    local _ns=$1
    local _secret=$2
    local _certfile=$3
    local _keyfile=$4
    if [ -z "$(secretexist "$_ns" "$_secret")" ]; then
        kubectl create secret tls "$_secret" --cert "$_certfile" --key "$_keyfile" -n "$_ns"
    else
        >&2 echo $_secret exists
    fi
    }

#
## jaddToList
#
jaddToList() {
    local _list="$1"
    local _item="$2"

    if [[ -z "$_list" ]]; then
        echo "$_list" | jq -n --arg s "$_item" '. + ["$_item"]'
    else
        echo "$_list" | jq --arg s "$_item" '. + ["$_item"]'
    fi
    }
